#!/usr/bin/env node
const app = require('../app');
const http = require('http');
const db = require('../models');
const { sendLog } = require('../helpers/utility');
const config = require('../config');
require('dotenv').config();

process.on('unhandledRejection', (err) => {
   //    sendDiscordNotification('Fehler', `new Error: \n\n\`\`\`${err}\`\`\``);

   console.log('=== UNHANDLED REJECTION ===');
   console.log(err);
});

process.on('uncaughtException', (error) => {
   //    sendDiscordNotification('Fehler', `new Error: \n\n\`\`\`${error}\`\`\``);

   console.log('=== UNHANDLED Exception ===');
   console.log(error);
});

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

db.sequelize.sync({ alter: true, force: false }).then(() => {
   server.listen(port);
   server.on('error', onError);
   server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
   const port = parseInt(val, 10);

   if (isNaN(port)) {
      // named pipe
      return val;
   }

   if (port >= 0) {
      // port number
      return port;
   }

   return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
   if (error.syscall !== 'listen') {
      throw error;
   }

   const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

   sendLog(error, 2);
   // handle specific listen errors with friendly messages
   switch (error.code) {
      case 'EACCES':
         console.error(bind + ' requires elevated privileges');
         process.exit(1);
         break;
      case 'EADDRINUSE':
         console.error(bind + ' is already in use');
         process.exit(1);
         break;
      default:
         throw error;
   }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
   const addr = server.address();
   const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
   console.log('Listening on ' + bind);
   require('../helpers/crons');
}
